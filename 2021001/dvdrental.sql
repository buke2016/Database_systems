import psycopg2
createdb dvdrental

psql -U postgres -d dvdrental -f C:\Users\bukep\Desktop\Database_systems\dvd_rental_postgreSQL\dvdrental\dvdrental.sql

SELECT title, film.length, category.name 
FROM film
JOIN film_category
ON film_category.film_id = film.film_id
JOIN category
ON film_category.category_id = category.category_id
WHERE film.length BETWEEN 70 AND 100 
OR category.name = 'Horror'
ORDER BY film.length;

-- my code
SELECT title, length, name
FROM film
JOIN film_category
ON film.film_id = film_category.film_id
JOIN category
ON film_category.category_id = category.category_id
WHERE length BETWEEN 70 AND 100
OR name = 'Horror'
ORDER BY length;

EXPLAIN ANALYZE
SELECT
    film.title,
    SELECT COUNT(*)
    FROM rental
    JOIN inventory ON rental.inventory_id * inventory.inventory_id
    WHERE inventory.film_id = film.film_id AS rental_count
FROM film
    rental_count DESC

--     JOIN film ON inventory.film_id = film.film_id

-- started coding#######

-- Query to select films with length between 70 and 100 or category 'Horror'
SELECT title, length, name
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE length BETWEEN 70 AND 100
   OR name = 'Horror'
ORDER BY length;

-- Query to get the count of rentals for each film
EXPLAIN ANALYZE
SELECT
    film.title,
    (SELECT COUNT(*)
     FROM rental
     JOIN inventory ON rental.inventory_id = inventory.inventory_id
     WHERE inventory.film_id = film.film_id) AS rental_count
FROM film
ORDER BY rental_count DESC;

-- How can I perform data analysis on the DVD rental dataset using SQL queries?
-- List Films by length and category:
SELECT title, length, name
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE length BETWEEN 70 AND 100
   OR name = 'Horror'
ORDER BY length;

-- Count Rentals for Each Film:
EXPLAIN ANALYZE
SELECT
    film.title,
    (SELECT COUNT(*)
     FROM rental
     JOIN inventory ON rental.inventory_id = inventory.inventory_id
     WHERE inventory.film_id = film.film_id) AS rental_count
FROM film
ORDER BY rental_count DESC;

-- Top 10 Customers by rental count
SELECT
    customer.first_name,
    customer.last_name,
    COUNT(rental.rental_id) AS rental_count
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
GROUP BY customer.first_name, customer.last_name
ORDER BY rental_count DESC
LIMIT 10;

-- revenue Generated by each Film
SELECT
    film.title,
    SUM(payment.amount) AS total_revenue
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
JOIN payment ON rental.rental_id = payment.rental_id
GROUP BY film.title
ORDER BY total_revenue DESC;

-- Average Rental Duration by Film Category
SELECT
    category.name,
    AVG(DATE_PART('day', rental.return_date - rental.rental_date)) AS avg_rental_duration
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
WHERE rental.return_date IS NOT NULL
GROUP BY category.name
ORDER BY avg_rental_duration DESC;

-- Most Popular Film Categories
SELECT
    category.name,
    COUNT(rental.rental_id) AS rental_count
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY category.name
ORDER BY rental_count DESC;

-- Explanation:
-- List Films by Length and Category: This query lists films with a length between 70 and 100 minutes or belonging to the 'Horror' category, ordered by length.
-- Count Rentals for Each Film: This query counts the number of rentals for each film and orders the results by the rental count in descending order.
-- Top 10 Customers by Rental Count: This query lists the top 10 customers based on the number of rentals they have made.
-- Revenue Generated by Each Film: This query calculates the total revenue generated by each film based on the payments made for rentals.
-- Average Rental Duration by Film Category: This query calculates the average rental duration for each film category.
-- Most Popular Film Categories: This query lists the most popular film categories based on the number of rentals.

-- What are the most rented films in the DVD rental dataset?

-- Find the most rented films
SELECT
    film.title,
    COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC;

-- Explanation:
-- JOIN Statements: The query joins the film, inventory, and rental tables to link films with their rentals.
-- COUNT Function: The COUNT(rental.rental_id) function counts the number of rentals for each film.
-- GROUP BY Clause: The GROUP BY film.title clause groups the results by film title.
-- ORDER BY Clause: The ORDER BY rental_count DESC clause orders the results by the rental count in descending order, showing the most rented films first.

-- List films by length and category
SELECT title, length, name
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE film.length BETWEEN 70 AND 100 
   OR category.name = 'Horror'
ORDER BY film.length;

-- My code
SELECT title, length, name
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE length BETWEEN 70 AND 100
   OR name = 'Horror'
ORDER BY length;

-- Find the most rented films
EXPLAIN ANALYZE
SELECT
    film.title,
    COUNT(rental.rental_id) AS rental_count
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY film.title
ORDER BY rental_count DESC;

-- What are the average rental durations for different film categories in the DVD rental dataset?

SELECT
    category.name AS category_name,
    AVG(DATE_PART('day', rental.return_date - rental.rental_date)) AS avg_rental_duration
FROM category
JOIN film_category ON category.category_id = film_category.category_id
JOIN film ON film_category.film_id = film.film_id
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
WHERE rental.return_date IS NOT NULL
GROUP BY category.name
ORDER BY avg_rental_duration DESC;
-- Explanation:
-- JOIN Statements: The query joins the category, film_category, film, inventory, and rental tables to link film categories with their rentals.
-- DATE_PART Function: The DATE_PART('day', rental.return_date - rental.rental_date) function calculates the rental duration in days.
-- AVG Function: The AVG function calculates the average rental duration for each category.
-- WHERE Clause: The WHERE rental.return_date IS NOT NULL clause ensures that only completed rentals (with a return date) are considered.
-- GROUP BY Clause: The GROUP BY category.name clause groups the results by film category.
-- ORDER BY Clause: The ORDER BY avg_rental_duration DESC clause orders the results by the average rental duration in descending order.

-- List films by length and category
SELECT title, length, name
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE film.length BETWEEN 70 AND 100 
   OR category.name = 'Horror'
ORDER BY film.length;

-- My code
SELECT title, length, name
FROM film
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE length BETWEEN 70 AND 100
   OR name = 'Horror'
ORDER BY length;

-- Find the most rented films
EXPLAIN ANALYZE
SELECT
    film.title,
    (SELECT COUNT(*)
     FROM rental
     JOIN inventory ON rental.inventory_id = inventory.inventory_id
     WHERE inventory.film_id = film.film_id) AS rental_count
FROM film
ORDER BY rental_count DESC;